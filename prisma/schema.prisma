// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum FriendshipStatus {
  pending
  accepted
  blocked
}

enum GroupRole {
  admin
  member
}

enum TripStatus {
  active
  ended
  planned
}

// MODELS
model User {
  id           String   @id @default(uuid())
  username     String   @unique @db.VarChar(50)
  email        String   @unique @db.VarChar(255)
  passwordHash String   @db.VarChar(255)
  createdAt    DateTime @default(now())

  // PostGIS location is best handled with two floats for ORM compatibility.
  // Raw SQL queries can still be used for complex geospatial operations.
  lastLocationLat Float?
  lastLocationLon Float?

  refreshToken String? @unique @db.Text

  isEmailVerified    Boolean   @default(false)
  verificationCode   String?   @db.Text
  verificationExpiry DateTime?

  ownedGroups Group[]       @relation("GroupOwner")
  memberships GroupMember[]
  messages    Message[]

  // For friendships table
  sentFriendships       Friendship[] @relation("UserOne")
  receivedFriendships   Friendship[] @relation("UserTwo")
  actionUserFriendships Friendship[] @relation("ActionUser")

  @@index([email])
  @@index([username])
}

model Friendship {
  userOneId    String
  userTwoId    String
  status       FriendshipStatus
  actionUserId String
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt

  userOne    User @relation("UserOne", fields: [userOneId], references: [id], onDelete: Cascade)
  userTwo    User @relation("UserTwo", fields: [userTwoId], references: [id], onDelete: Cascade)
  actionUser User @relation("ActionUser", fields: [actionUserId], references: [id], onDelete: Cascade)

  @@id([userOneId, userTwoId])
}

model Group {
  id          String   @id @default(uuid())
  name        String   @db.VarChar(100)
  description String?
  ownerId     String?
  createdAt   DateTime @default(now())

  owner    User?         @relation("GroupOwner", fields: [ownerId], references: [id], onDelete: SetNull)
  members  GroupMember[]
  trips    Trip[]
  messages Message[]
}

model GroupMember {
  userId   String
  groupId  String
  role     GroupRole @default(member)
  joinedAt DateTime  @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@id([userId, groupId])
}

model Trip {
  id        String     @id @default(uuid())
  groupId   String
  name      String     @db.VarChar(100)
  status    TripStatus @default(planned)
  startTime DateTime?
  endTime   DateTime?
  createdAt DateTime   @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
}

model Message {
  id        String   @id @default(uuid())
  groupId   String
  userId    String
  content   String
  createdAt DateTime @default(now())

  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([groupId])
}
